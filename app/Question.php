<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Question extends Model
{
    protected $table = 'questions';
    protected $fillable = ['user_id', 'product_id', 'question_id', 'content', 'like', 'dislike', 'status', 'answer_count', 'send_email', 'time'];
    use SoftDeletes;
    const SEND_EMAIL = 'yes';
    const NO_SEND_EMAIL = 'no';
    const QUESTION_PUBLISHED = 1;

    public static function getData($request)
    {
        $url = '?';
        $questions = Question::with(['getUserInfo', 'getProduct', 'getParent'])->orderBy('id', 'ASC');

        if (in_trashed($request)) {
            $questions = self::onlyTrashed();
            $url = create_paginate_url($url, 'trashed=true');
        }

        if (isset($_GET['search']) && $_GET['search'] != '') {
            $searchVal = $_GET['search'];
            $questions->withTrashed()->where('id', $_GET['search']);
        }

        $questions = $questions->paginate(10);
        $questions = $questions->withPath($url);
        return $questions;
    }

    public function getUser()
    {
        return $this->hasOne(User::class, 'id', 'user_id')
            ->select('id', 'name')
            ->withDefault(['name' => 'کاربر دیجی کالا']);
    }

    public function getUserInfo()
    {
        return $this->hasOne(AdditionalInfo::class, 'user_id', 'user_id')
            ->select('id', 'user_id', 'first_name', 'last_name', 'email');
    }

    public function getAnswer()
    {
        return $this->hasMany(Question::class, 'question_id', 'id')
            ->where('status', Question::QUESTION_PUBLISHED);
    }

    public function getParent()
    {
        return $this->hasOne(Question::class, 'id', 'question_id');
    }

    public function getProduct()
    {
        return $this->hasOne(Product::class, 'id', 'product_id')
            ->select('id', 'title', 'product_url');
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleted(function ($item) {
            $item->decrement('answer_count',1);
        });

        static::restoring(function ($item) {
            $item->increment('answer_count',1);
        });
    }
}
